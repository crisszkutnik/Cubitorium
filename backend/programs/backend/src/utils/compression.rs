/// Rubik's Cube move string compression algorithm
///
/// Given a move sequence such as "R U' Fw L2 D M'" compress to 13% of its size on average.
/// Using a Huffman tree, we get an average of 3.1 bits per move!
///
use anchor_lang::prelude::*;

use crate::error::CubeError;

/// Returns bit sequence+len + atom moves, according to Huffman's tree in [crate::move_def::move_tree]
/// Compression methods are implemented per-type in trait [crate::utils::Puzzle]
pub fn huffman_compress_move(mov: &str) -> Result<(u16, u32)> {
    Ok(match mov {
        "R" => (0b00, 2),
        "R'" => (0b01, 2),
        "U'" => (0b100, 3),
        "U" => (0b110, 3),
        "U2'" => (0b1011, 4),
        "F'" => (0b10101, 5),
        "R2'" => (0b11101, 5),
        "D" => (0b101001, 6),
        "D'" => (0b111000, 6),
        "L'" => (0b111100, 6),
        "L" => (0b111101, 6),
        "F" => (0b111111, 6),
        "Rw'" => (0b1010000, 7),
        "Rw" => (0b1010001, 7),
        "R2" => (0b1111100, 7),
        "U2" => (0b1111101, 7),
        "F2" => (0b11100101, 8),
        "F2'" => (0b11100101, 8),
        "M" => (0b111001001, 9),
        "Lw'" => (0b1110010001, 10),
        "B2" => (0b1110011001, 10),
        "M'" => (0b1110011011, 10),
        "x" => (0b11100100000, 11),
        "B" => (0b11100110000, 11),
        "B2'" => (0b11100110001, 11),
        "B'" => (0b11100111000, 11),
        "Lw" => (0b11100111001, 11),
        "Fw" => (0b11100111100, 11),
        "Fw'" => (0b11100111101, 11),
        "z" => (0b111001000011, 12),
        "L2" => (0b111001101000, 12),
        "L2'" => (0b111001101001, 12),
        "x'" => (0b111001101010, 12),
        "y" => (0b111001101011, 12),
        "y2" => (0b1110010000100, 13),
        "y2'" => (0b1110010000100, 13),
        "z'" => (0b1110010000101, 13),
        "z2" => (0b1110011101000, 13),
        "z2'" => (0b1110011101000, 13),
        "Dw" => (0b1110011101100, 13),
        "Rw2" => (0b1110011111001, 13),
        "Rw2'" => (0b1110011111001, 13),
        "S" => (0b1110011111010, 13),
        "S'" => (0b1110011111011, 13),
        "Uw" => (0b1110011111100, 13),
        "Uw'" => (0b1110011111101, 13),
        "y'" => (0b1110011111111, 13),
        "Bw" => (0b11100111010011, 14),
        "Bw'" => (0b11100111010100, 14),
        "Bw2" => (0b11100111010101, 14),
        "Bw2'" => (0b11100111010101, 14),
        "D2" => (0b11100111010110, 14),
        "D2'" => (0b11100111010110, 14),
        "Dw'" => (0b11100111010111, 14),
        "Dw2" => (0b11100111011010, 14),
        "Dw2'" => (0b11100111011010, 14),
        "E" => (0b11100111011011, 14),
        "E'" => (0b11100111011100, 14),
        "E2" => (0b11100111011101, 14),
        "E2'" => (0b11100111011101, 14),
        "Fw2" => (0b11100111011110, 14),
        "Fw2'" => (0b11100111011110, 14),
        "Lw2" => (0b11100111011111, 14),
        "Lw2'" => (0b11100111011111, 14),
        "M2" => (0b11100111110000, 14),
        "M2'" => (0b11100111110000, 14),
        "S2" => (0b11100111110001, 14),
        "S2'" => (0b11100111110001, 14),
        "Uw2" => (0b11100111111100, 14),
        "Uw2'" => (0b11100111111100, 14),
        "x2" => (0b11100111111101, 14),
        "x2'" => (0b11100111111101, 14),
        _ => err!(CubeError::InvalidMove)?,
    })
}
